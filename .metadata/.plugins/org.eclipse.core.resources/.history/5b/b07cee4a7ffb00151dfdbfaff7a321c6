/*
 * Keith Williams (G00324844)
 * 18/03/2016
 */

package ie.gmit;

import java.io.*;
import java.util.*;

public class Index {
	private Set<String> ignore = new TreeSet<String>();
	private Map<InsensitiveString, String> dictionary = new HashMap<InsensitiveString, String>();
	private Map<InsensitiveString, WordDetail> map = new HashMap<InsensitiveString, WordDetail>();
	
	public Index () {
		try {
			parseIgnore("../stopwords.txt");
			parseDictionary("../dictionary.csv");
			parseText("../WarAndPeace-LeoTolstoy.txt");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	// Initialize the ignore set with words from specified text file
	private void parseIgnore(String filename) throws Exception {
		// Open ignore/stopwords file
		BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (filename)));
		String line = null;
		
		// Read file line by line until eof O(n)
		// Add each word to ignore set O(1)
		while ((line = br.readLine()) != null) {
			ignore.add(line);
		}
	}
	
	// Initialize the dictionary map with words from specified file
	private void parseDictionary(String filename) throws Exception {
		// Open dictionary file
		BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (filename)));
		String line = null;
		InsensitiveString key;
		
		// Read file line by line until eof O(n)
		// Add each word to dictionary map O(1)
		while ((line = br.readLine()) != null) {
			// Get the word the definition if for by
			// 1) splitting the string into two when the first delimiter is reached (",")
			// 2) removing the first character (which is a double quote) from the resulting string
			String word = line.split("\",\"", 2)[0].substring(1);
			String definition = line;
			key = new InsensitiveString(word);
			
			// If the definition spans more than one line
			// i.e. the line does not end with a double quote
			// continue reading lines until this condition is met
			// and append the line to the definition
			while (line.substring (line.length() - 1).compareTo("\"") != 0) {
				if ((line = br.readLine()) != null) {
					definition += line;
				}
			}
			
			if (dictionary.containsKey(key)) {
				definition += "\n" + dictionary.get(key);
			}
			
			dictionary.put(key, definition);
		}
	}
	
	// Initialize the map with words and word details (i.e. definition & page)
	// from specified text file
	private void parseText(String filename) throws Exception {
		// Open text file
		BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (filename)));
		String line = null;
		int page = 1;
		int lineCounter = 0;
		InsensitiveString word;
		
		// Read file line by line until eof O(n)
		while ((line = br.readLine()) != null) {
			++lineCounter;
			
			if (lineCounter % 40 == 0) {
				++page;
			}
			
			// Remove all non word characters from line except white spaces
			line = line.replaceAll("[\\W&&\\S]+", "");
			
			// Split line up into single words
			String[] words = line.split("\\s+");
			
			// Loop over words O(n)
			for (int i = 0; i < words.length; ++i) {
				word = new InsensitiveString(words[i]);
				
				if (ignore.contains(words[i])) continue;

				if (map.containsKey(word)) {
					WordDetail wd = map.get(word);
					wd.addIndex(page);
				} else {
					WordDetail wd = new WordDetail(page);
					map.put (word, wd);
					String definition = dictionary.get(word);
					
					if (definition != null) {
						wd.setDefinition(definition);
					}
				}
			}
		}
	}
	
	// This method is used to output the index to the screen
	// This method is O(n) due to the loop required to iterate over map values
	public void printIndex() {
		Collection<InsensitiveString> keys = map.keySet();
		
		for (InsensitiveString key : keys) {
			System.out.printf("%-20s%s\n", key.getWord(), map.get(key).toString());
		}
	}
	
	// This method is used for displaying the values in the dictionary map
	// This method is O(n) due to the loop required to print each line
	public void printDictionary() {
		Collection<InsensitiveString> keys = dictionary.keySet();
		
		for (InsensitiveString key : keys) {
			System.out.printf("%-20s%s\n", key.getWord(), dictionary.get(key).toString());
		}
	}
	
	public void search() {
		Scanner scanner = new Scanner(System.in);
		System.out.println("Enter word to search for: ");
		String word = scanner.next();
		word.substring(word.length() - 5);
		
		InsensitiveString key = new InsensitiveString (word);
		
		if (map.containsKey(key)){
			System.out.println("Found word:\n" + map.get(key).toString());
		}else{
			System.out.println(key.getWord() + " is not in the dictionary");
		}
	}
}

/*public class Index {
	private Set<String> ignore = new TreeSet<String>();
	private Map<String, String> dictionary = new HashMap<String, String>();
	private Map<String, WordDetail> map = new HashMap<String, WordDetail>();
	
	public Index () {
		try {
			parseIgnore("../stopwords.txt");
			parseDictionary("../dictionary.csv");
			parseText("../WarAndPeace-LeoTolstoy.txt");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	// Initialize the ignore set with words from specified text file
	private void parseIgnore(String filename) throws Exception {
		// Open ignore/stopwords file
		BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (filename)));
		String line = null;
		
		// Read file line by line until eof O(n)
		// Add each word to ignore set O(1)
		while ((line = br.readLine()) != null) {
			ignore.add(line);
		}
	}
	
	// Initialize the dictionary map with words from specified file
	private void parseDictionary(String filename) throws Exception {
		// Open dictionary file
		BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (filename)));
		String line = null;
		
		// Read file line by line until eof O(n)
		// Add each word to dictionary map O(1)
		while ((line = br.readLine()) != null) {
			// Get the word the definition if for by
			// 1) splitting the string into two when the first delimiter is reached (",")
			// 2) removing the first character (which is a double quote) from the resulting string
			String word = line.split("\",\"", 2)[0].substring(1);
			String definition = line;
			
			// If the definition spans more than one line
			// i.e. the line does not end with a double quote
			// continue reading lines until this condition is met
			// and append the line to the definition
			while (line.substring (line.length() - 1).compareTo("\"") != 0) {
				if ((line = br.readLine()) != null) {
					definition += line;
				}
			}
			
			if (dictionary.containsKey(word)) {
				definition += "\n" + dictionary.get(word);
			}
			
			dictionary.put(word, definition);
		}
	}
	
	// Initialize the map with words and word details (i.e. definition & page)
	// from specified text file
	private void parseText(String filename) throws Exception {
		// Open text file
		BufferedReader br = new BufferedReader (new InputStreamReader (new FileInputStream (filename)));
		String line = null;
		int page = 1;
		int lineCounter = 0;
		
		// Read file line by line until eof O(n)
		while ((line = br.readLine()) != null) {
			++lineCounter;
			
			if (lineCounter % 40 == 0) {
				++page;
			}
			
			// Remove all non word characters from line except white spaces
			line = line.replaceAll("[\\W&&\\S]+", "");
			
			// Split line up into single words
			String[] words = line.split("\\s+");
			
			// Loop over words O(n)
			for (int i = 0; i < words.length; ++i) {
				words[i] = words[i].toLowerCase();
				
				if (ignore.contains(words[i])) continue;
				
				// Convert first character in each word to uppercase
				if (words[i].length() > 1) {
					words[i] = words[i].substring(0, 1).toUpperCase() + words[i].substring(1);
				} else {
					words[i] = words[i].toUpperCase();
				}

				if (map.containsKey(words[i])) {
					WordDetail wd = map.get(words[i]);
					wd.addIndex(page);
				} else {
					WordDetail wd = new WordDetail(page);
					map.put (words[i], wd);
					String definition = dictionary.get(words[i]);
					
					if (definition != null) {
						wd.setDefinition(definition);
					}
				}
			}
		}
	}
	
	// This method is used to output the index to the screen
	// This method is O(n) due to the loop required to iterate over map values
	public void printIndex() {
		Collection<String> keys = map.keySet();
		
		for (String key : keys) {
			System.out.printf("%-20s%s\n", key, map.get(key).toString());
		}
	}
	
	// This method is used for displaying the values in the dictionary map
	// This method is O(n) due to the loop required to print each line
	public void printDictionary() {
		Collection<String> keys = dictionary.keySet();
		
		for (String key : keys) {
			System.out.printf("%-20s%s\n", key, dictionary.get(key).toString());
		}
	}
}*/
